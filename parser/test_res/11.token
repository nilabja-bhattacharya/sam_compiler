TOKEN: int
TOKEN: arr
TOKEN: [
TOKEN: 1000
TOKEN: ]
TOKEN: ;
TOKEN: void
TOKEN: merge
TOKEN: (
TOKEN: int
TOKEN: l
TOKEN: ,
TOKEN: int
TOKEN: m
TOKEN: ,
TOKEN: int
TOKEN: r
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: k
TOKEN: ;
TOKEN: int
TOKEN: n1
TOKEN: =
TOKEN: m
TOKEN: -
TOKEN: l
TOKEN: +
TOKEN: 1
TOKEN: ;
TOKEN: int
TOKEN: n2
TOKEN: =
TOKEN: r
TOKEN: -
TOKEN: m
TOKEN: ;
TOKEN: int
TOKEN: L
TOKEN: [
TOKEN: n1
TOKEN: ]
TOKEN: ,
TOKEN: R
TOKEN: [
TOKEN: n2
TOKEN: ]
TOKEN: ;
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: n1
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: k
TOKEN: =
TOKEN: l
TOKEN: +
TOKEN: i
TOKEN: ;
TOKEN: L
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: k
TOKEN: ]
TOKEN: ;
TOKEN: }
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: j
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: j
TOKEN: <
TOKEN: n2
TOKEN: ;
TOKEN: j
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: k
TOKEN: =
TOKEN: m
TOKEN: +
TOKEN: 1
TOKEN: +
TOKEN: j
TOKEN: ;
TOKEN: R
TOKEN: [
TOKEN: j
TOKEN: ]
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: k
TOKEN: ]
TOKEN: ;
TOKEN: }
TOKEN: i
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: j
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: k
TOKEN: =
TOKEN: l
TOKEN: ;
TOKEN: while
TOKEN: (
TOKEN: i
TOKEN: <
TOKEN: n1
TOKEN: &&
TOKEN: j
TOKEN: <
TOKEN: n2
TOKEN: )
TOKEN: {
TOKEN: if
TOKEN: (
TOKEN: L
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: <=
TOKEN: R
TOKEN: [
TOKEN: j
TOKEN: ]
TOKEN: )
TOKEN: {
TOKEN: arr
TOKEN: [
TOKEN: k
TOKEN: ]
TOKEN: =
TOKEN: L
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: else
TOKEN: {
TOKEN: arr
TOKEN: [
TOKEN: k
TOKEN: ]
TOKEN: =
TOKEN: R
TOKEN: [
TOKEN: j
TOKEN: ]
TOKEN: ;
TOKEN: j
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: k
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: while
TOKEN: (
TOKEN: i
TOKEN: <
TOKEN: n1
TOKEN: )
TOKEN: {
TOKEN: arr
TOKEN: [
TOKEN: k
TOKEN: ]
TOKEN: =
TOKEN: L
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: ;
TOKEN: k
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: while
TOKEN: (
TOKEN: j
TOKEN: <
TOKEN: n2
TOKEN: )
TOKEN: {
TOKEN: arr
TOKEN: [
TOKEN: k
TOKEN: ]
TOKEN: =
TOKEN: R
TOKEN: [
TOKEN: j
TOKEN: ]
TOKEN: ;
TOKEN: j
TOKEN: ++
TOKEN: ;
TOKEN: k
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: }
TOKEN: void
TOKEN: mergeSort
TOKEN: (
TOKEN: int
TOKEN: l
TOKEN: ,
TOKEN: int
TOKEN: r
TOKEN: )
TOKEN: {
TOKEN: if
TOKEN: (
TOKEN: l
TOKEN: <
TOKEN: r
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: x
TOKEN: =
TOKEN: r
TOKEN: -
TOKEN: l
TOKEN: ;
TOKEN: int
TOKEN: y
TOKEN: =
TOKEN: x
TOKEN: /
TOKEN: 2
TOKEN: ;
TOKEN: int
TOKEN: m
TOKEN: =
TOKEN: l
TOKEN: +
TOKEN: y
TOKEN: ;
TOKEN: int
TOKEN: f
TOKEN: =
TOKEN: m
TOKEN: +
TOKEN: 1
TOKEN: ;
TOKEN: mergeSort
TOKEN: (
TOKEN: l
TOKEN: ,
TOKEN: m
TOKEN: )
TOKEN: ;
TOKEN: mergeSort
TOKEN: (
TOKEN: f
TOKEN: ,
TOKEN: r
TOKEN: )
TOKEN: ;
TOKEN: merge
TOKEN: (
TOKEN: l
TOKEN: ,
TOKEN: m
TOKEN: ,
TOKEN: r
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: }
