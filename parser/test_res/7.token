TOKEN: void
TOKEN: pythagoreanTriplets
TOKEN: (
TOKEN: int
TOKEN: limit
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: a
TOKEN: ,
TOKEN: b
TOKEN: ,
TOKEN: c
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: int
TOKEN: m
TOKEN: =
TOKEN: 2
TOKEN: ;
TOKEN: while
TOKEN: (
TOKEN: c
TOKEN: <
TOKEN: limit
TOKEN: )
TOKEN: {
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: n
TOKEN: =
TOKEN: 1
TOKEN: ;
TOKEN: n
TOKEN: <
TOKEN: m
TOKEN: ;
TOKEN: ++
TOKEN: n
TOKEN: )
TOKEN: {
TOKEN: a
TOKEN: =
TOKEN: m
TOKEN: *
TOKEN: m
TOKEN: -
TOKEN: n
TOKEN: *
TOKEN: n
TOKEN: ;
TOKEN: b
TOKEN: =
TOKEN: 2
TOKEN: *
TOKEN: m
TOKEN: *
TOKEN: n
TOKEN: ;
TOKEN: c
TOKEN: =
TOKEN: m
TOKEN: *
TOKEN: m
TOKEN: +
TOKEN: n
TOKEN: *
TOKEN: n
TOKEN: ;
TOKEN: if
TOKEN: (
TOKEN: c
TOKEN: >
TOKEN: limit
TOKEN: )
TOKEN: {
TOKEN: break
TOKEN: ;
TOKEN: }
TOKEN: printf
TOKEN: (
TOKEN: "%d %d %d\n"
TOKEN: ,
TOKEN: a
TOKEN: ,
TOKEN: b
TOKEN: ,
TOKEN: c
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: m
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: }
