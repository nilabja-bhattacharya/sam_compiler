TOKEN: int
TOKEN: arr
TOKEN: [
TOKEN: 1000
TOKEN: ]
TOKEN: ;
TOKEN: void
TOKEN: insertionSort
TOKEN: (
TOKEN: int
TOKEN: arr
TOKEN: ,
TOKEN: int
TOKEN: n
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: key
TOKEN: ,
TOKEN: j
TOKEN: ;
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 1
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: n
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: key
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: ;
TOKEN: j
TOKEN: =
TOKEN: i
TOKEN: -
TOKEN: 1
TOKEN: ;
TOKEN: while
TOKEN: (
TOKEN: j
TOKEN: >=
TOKEN: 0
TOKEN: &&
TOKEN: arr
TOKEN: [
TOKEN: j
TOKEN: ]
TOKEN: >
TOKEN: key
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: x
TOKEN: =
TOKEN: j
TOKEN: +
TOKEN: 1
TOKEN: ;
TOKEN: arr
TOKEN: [
TOKEN: x
TOKEN: ]
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: j
TOKEN: ]
TOKEN: ;
TOKEN: j
TOKEN: =
TOKEN: j
TOKEN: -
TOKEN: 1
TOKEN: ;
TOKEN: }
TOKEN: int
TOKEN: x
TOKEN: =
TOKEN: j
TOKEN: +
TOKEN: 1
TOKEN: ;
TOKEN: arr
TOKEN: [
TOKEN: x
TOKEN: ]
TOKEN: =
TOKEN: key
TOKEN: ;
TOKEN: }
TOKEN: }
