TYPE: INT
EXPR: INT_C
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
ID_LIST: IDEN
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
TYPE: INT
IDEN: ID
ARGUMENT_LIST -> TYPE IDEN
ARGUMENT_LIST -> ARGUMENT
TYPE: INT
IDEN: ID
EXPR: INT_C
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '>' EXPR
IDEN: ID
OP: '='
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
IF '(' EXPR ')' SCOPE
STATEMENT -> IF_BLOCK
STATEMENT_LIST -> STATEMENT
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
STATEMENT -> RETURN EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FUNCTION
FUNCTION_LIST -> FUNCTION
TYPE: VOID
TYPE: INT
IDEN: ID
ARGUMENT_LIST -> TYPE IDEN
ARGUMENT_LIST -> ARGUMENT
TYPE: INT
IDEN: ID
ARGUMENT_LIST -> TYPE IDEN
ARGUMENT_LIST -> ARGUMENT_LIST ',' ARGUMENT
TYPE: INT
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
ID_LIST: IDEN
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
EXPR: INT_C
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
ID_LIST: IDEN
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
TYPE: INT
IDEN: ID
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '/' EXPR
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '%' EXPR
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
TYPE: INT
IDEN: ID
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '-' EXPR
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
OP: PEQ
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '-' EXPR
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR GEQ EXPR
IDEN: ID
INC_DEC:    IDEN DEC
STATEMENT -> INC_DEC
TYPE: INT
IDEN: ID
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '/' EXPR
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '%' EXPR
EXPR: INT_C
EXPR: EXPR '-' EXPR
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
OP: '='
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
OP: '='
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '/' EXPR
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
OP: '='
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '%' EXPR
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
INC_DEC:    IDEN DEC
STATEMENT -> INC_DEC
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
OP: '='
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FUNCTION
FUNCTION_LIST -> FUNCTION_LIST FUNCTION
TYPE: VOID
TYPE: INT
IDEN: ID
ARGUMENT_LIST -> TYPE IDEN
ARGUMENT_LIST -> ARGUMENT
TYPE: INT
IDEN: ID
IDEN: ID
ID_LIST: IDEN
FUNC_CALL: ID '(' ID_LIST ')'
EXPR: FUNC_CALL
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '/' EXPR
EXPR: INT_C
EXPR: EXPR '>' EXPR
IDEN: ID
OP: MULTEQ
EXPR: INT_C
STATEMENT -> IDEN OP EXPR
IDEN: ID
ID_LIST: IDEN
IDEN: ID
ID_LIST: ID_LIST ',' IDEN
FUNC_CALL: ID '(' ID_LIST ')'
STATEMENT -> FUNC_CALL
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FUNCTION
FUNCTION_LIST -> FUNCTION_LIST FUNCTION
PROGRAM -> STATEMENT_LIST FUNCTION_LIST
