TYPE: INT
EXPR: INT_C
ARRAY: '['EXPR']'
EXPR: INT_C
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
ID_LIST: IDEN
EXPR: INT_C
ARRAY: '['EXPR']'
EXPR: INT_C
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
ID_LIST: ID_LIST ',' IDEN
EXPR: INT_C
ARRAY: '['EXPR']'
EXPR: INT_C
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
ID_LIST: ID_LIST ',' IDEN
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: VOID
ARGUMENT_LIST -> 
ARGUMENT_LIST -> ARGUMENT
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
OP: '='
EXPR: INT_C
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
OP: PEQ
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
EXPR: IDEN
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
EXPR: IDEN
EXPR: EXPR '*' EXPR
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT
SCOPE: '{' STATEMENT_LIST '}'
FUNCTION
FUNCTION_LIST -> FUNCTION
PROGRAM -> STATEMENT_LIST FUNCTION_LIST
