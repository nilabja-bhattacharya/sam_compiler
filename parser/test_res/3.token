TOKEN: void
TOKEN: uniquewords
TOKEN: (
TOKEN: char
TOKEN: filename
TOKEN: [
TOKEN: ]
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: chararr
TOKEN: [
TOKEN: 26
TOKEN: ]
TOKEN: ;
TOKEN: char
TOKEN: ch
TOKEN: =
TOKEN: 'r'
TOKEN: ;
TOKEN: FILE*
TOKEN: fptr
TOKEN: =
TOKEN: fopen
TOKEN: (
TOKEN: filename
TOKEN: ,
TOKEN: ch
TOKEN: )
TOKEN: ;
TOKEN: if
TOKEN: (
TOKEN: fptr
TOKEN: ==
TOKEN: NULL
TOKEN: )
TOKEN: {
TOKEN: printf
TOKEN: (
TOKEN: "Cannot open file \n"
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: char
TOKEN: c
TOKEN: =
TOKEN: fgetc
TOKEN: (
TOKEN: fptr
TOKEN: )
TOKEN: ;
TOKEN: char
TOKEN: listofwords
TOKEN: [
TOKEN: 1000
TOKEN: ]
TOKEN: [
TOKEN: 50
TOKEN: ]
TOKEN: ;
TOKEN: int
TOKEN: k
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: while
TOKEN: (
TOKEN: c
TOKEN: !=
TOKEN: EOF
TOKEN: )
TOKEN: {
TOKEN: char
TOKEN: s
TOKEN: [
TOKEN: 50
TOKEN: ]
TOKEN: ;
TOKEN: s
TOKEN: [
TOKEN: 0
TOKEN: ]
TOKEN: =
TOKEN: c
TOKEN: ;
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: while
TOKEN: (
TOKEN: c
TOKEN: !=
TOKEN: ' '
TOKEN: )
TOKEN: {
TOKEN: c
TOKEN: =
TOKEN: fgetc
TOKEN: (
TOKEN: fptr
TOKEN: )
TOKEN: ;
TOKEN: s
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: =
TOKEN: c
TOKEN: ;
TOKEN: i
TOKEN: =
TOKEN: i
TOKEN: +
TOKEN: 1
TOKEN: ;
TOKEN: }
TOKEN: s
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: =
TOKEN: NULL
TOKEN: ;
TOKEN: bool
TOKEN: isunique
TOKEN: =
TOKEN: true
TOKEN: ;
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: k1
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: k1
TOKEN: <
TOKEN: k
TOKEN: ;
TOKEN: k
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: k2
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: while
TOKEN: (
TOKEN: listofwords
TOKEN: [
TOKEN: k1
TOKEN: ]
TOKEN: [
TOKEN: k2
TOKEN: ]
TOKEN: !=
TOKEN: NULL
TOKEN: and
TOKEN: s
TOKEN: [
TOKEN: k2
TOKEN: ]
TOKEN: !=
TOKEN: NULL
TOKEN: and
TOKEN: s
TOKEN: [
TOKEN: k2
TOKEN: ]
TOKEN: !=
TOKEN: listofwords
TOKEN: [
TOKEN: k1
TOKEN: ]
TOKEN: [
TOKEN: k2
TOKEN: ]
TOKEN: )
TOKEN: {
TOKEN: k2
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: if
TOKEN: (
TOKEN: listofwords
TOKEN: [
TOKEN: k1
TOKEN: ]
TOKEN: [
TOKEN: k2
TOKEN: ]
TOKEN: ==
TOKEN: NULL
TOKEN: and
TOKEN: s
TOKEN: [
TOKEN: k2
TOKEN: ]
TOKEN: ==
TOKEN: NULL
TOKEN: )
TOKEN: {
TOKEN: isunique
TOKEN: =
TOKEN: false
TOKEN: ;
TOKEN: break
TOKEN: ;
TOKEN: }
TOKEN: }
TOKEN: if
TOKEN: (
TOKEN: isunique
TOKEN: ==
TOKEN: true
TOKEN: )
TOKEN: {
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: k1
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: k1
TOKEN: <=
TOKEN: i
TOKEN: ;
TOKEN: k1
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: listofwords
TOKEN: [
TOKEN: k
TOKEN: ]
TOKEN: [
TOKEN: k1
TOKEN: ]
TOKEN: =
TOKEN: s
TOKEN: [
TOKEN: k1
TOKEN: ]
TOKEN: ;
TOKEN: }
TOKEN: }
TOKEN: c
TOKEN: =
TOKEN: fgetc
TOKEN: (
TOKEN: fptr
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: fclose
TOKEN: (
TOKEN: fptr
TOKEN: )
TOKEN: ;
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: k1
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: k1
TOKEN: <
TOKEN: k
TOKEN: ;
TOKEN: k
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: k2
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: while
TOKEN: (
TOKEN: listofwords
TOKEN: [
TOKEN: k1
TOKEN: ]
TOKEN: [
TOKEN: k2
TOKEN: ]
TOKEN: !=
TOKEN: NULL
TOKEN: )
TOKEN: {
TOKEN: printf
TOKEN: (
TOKEN: "%c "
TOKEN: ,
TOKEN: listofwords
TOKEN: [
TOKEN: k1
TOKEN: ]
TOKEN: [
TOKEN: k2
TOKEN: ]
TOKEN: )
TOKEN: ;
TOKEN: k2
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: printf
TOKEN: (
TOKEN: "\n"
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: }
