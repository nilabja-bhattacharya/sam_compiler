TOKEN: int
TOKEN: arr
TOKEN: [
TOKEN: 100
TOKEN: ]
TOKEN: ;
TOKEN: void
TOKEN: printcombi
TOKEN: (
TOKEN: int
TOKEN: s
TOKEN: ,
TOKEN: int
TOKEN: e
TOKEN: )
TOKEN: {
TOKEN: if
TOKEN: (
TOKEN: s
TOKEN: ==
TOKEN: e
TOKEN: )
TOKEN: {
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: e
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: printf
TOKEN: (
TOKEN: "%d "
TOKEN: ,
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: printf
TOKEN: (
TOKEN: "/n"
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: s
TOKEN: +
TOKEN: 1
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: e
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: x
TOKEN: =
TOKEN: s
TOKEN: +
TOKEN: 1
TOKEN: ;
TOKEN: swap
TOKEN: (
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: ,
TOKEN: arr
TOKEN: [
TOKEN: s
TOKEN: ]
TOKEN: )
TOKEN: ;
TOKEN: printcombi
TOKEN: (
TOKEN: x
TOKEN: ,
TOKEN: e
TOKEN: )
TOKEN: ;
TOKEN: swap
TOKEN: (
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: ,
TOKEN: arr
TOKEN: [
TOKEN: s
TOKEN: ]
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: }
TOKEN: void
TOKEN: allcombi
TOKEN: (
TOKEN: int
TOKEN: n
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: arr
TOKEN: [
TOKEN: n
TOKEN: ]
TOKEN: ,
TOKEN: x
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: n
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: =
TOKEN: i
TOKEN: +
TOKEN: 1
TOKEN: ;
TOKEN: }
TOKEN: printcombi
TOKEN: (
TOKEN: x
TOKEN: ,
TOKEN: n
TOKEN: )
TOKEN: ;
TOKEN: }
