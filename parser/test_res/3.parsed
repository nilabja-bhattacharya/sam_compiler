TYPE: VOID
TYPE: CHAR
ARRAY: '['']'
IDEN: ID ARRAY 
ARGUMENT_LIST -> TYPE IDEN
ARGUMENT_LIST -> ARGUMENT
TYPE: INT
EXPR: INT_C
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
ID_LIST: IDEN
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: CHAR
IDEN: ID
EXPR: CHAR_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: FILE_T
IDEN: ID
IDEN: ID
ID_LIST: IDEN
IDEN: ID
ID_LIST: ID_LIST ',' IDEN
FUNC_CALL: ID '(' ID_LIST ')'
EXPR: FUNC_CALL
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
EXPR: NULL_T
EXPR: EXPR EQ EXPR
PRINT_STMT: PRINT '(' STRING_C ')'
STATEMENT -> PRINT_STMT
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
IF '(' EXPR ')' SCOPE
STATEMENT -> IF_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: CHAR
IDEN: ID
IDEN: ID
ID_LIST: IDEN
FUNC_CALL: ID '(' ID_LIST ')'
EXPR: FUNC_CALL
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: CHAR
EXPR: INT_C
ARRAY: '['EXPR']'
EXPR: INT_C
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
ID_LIST: IDEN
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
EXPR: EOF_T
EXPR: EXPR NEQ EXPR
TYPE: CHAR
EXPR: INT_C
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
ID_LIST: IDEN
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
EXPR: INT_C
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
OP: '='
IDEN: ID
EXPR: IDEN
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
EXPR: CHAR_C
EXPR: EXPR NEQ EXPR
IDEN: ID
OP: '='
IDEN: ID
ID_LIST: IDEN
FUNC_CALL: ID '(' ID_LIST ')'
EXPR: FUNC_CALL
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
OP: '='
IDEN: ID
EXPR: IDEN
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
OP: '='
IDEN: ID
EXPR: IDEN
EXPR: INT_C
EXPR: EXPR '+' EXPR
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
WHILE '(' EXPR ')' SCOPE
STATEMENT -> WHILE_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
OP: '='
EXPR: NULL_T
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: BOOL
IDEN: ID
EXPR: TRUE
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
EXPR: IDEN
EXPR: NULL_T
EXPR: EXPR NEQ EXPR
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
EXPR: NULL_T
EXPR: EXPR NEQ EXPR
EXPR: EXPR AND EXPR
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
EXPR: IDEN
EXPR: EXPR NEQ EXPR
EXPR: EXPR AND EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
WHILE '(' EXPR ')' SCOPE
STATEMENT -> WHILE_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
EXPR: IDEN
EXPR: NULL_T
EXPR: EXPR EQ EXPR
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
EXPR: NULL_T
EXPR: EXPR EQ EXPR
EXPR: EXPR AND EXPR
IDEN: ID
OP: '='
EXPR: FALSE
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> BREAK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
IF '(' EXPR ')' SCOPE
STATEMENT -> IF_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
EXPR: TRUE
EXPR: EXPR EQ EXPR
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR LEQ EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
OP: '='
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID ARRAY 
EXPR: IDEN
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT
SCOPE: '{' STATEMENT_LIST '}'
IF '(' EXPR ')' SCOPE
STATEMENT -> IF_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
OP: '='
IDEN: ID
ID_LIST: IDEN
FUNC_CALL: ID '(' ID_LIST ')'
EXPR: FUNC_CALL
STATEMENT -> IDEN OP EXPR
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
WHILE '(' EXPR ')' SCOPE
STATEMENT -> WHILE_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
ID_LIST: IDEN
FUNC_CALL: ID '(' ID_LIST ')'
STATEMENT -> FUNC_CALL
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
IDEN: ID
EXPR: IDEN
IDEN: ID
EXPR: IDEN
EXPR: EXPR '<' EXPR
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
TYPE: INT
IDEN: ID
EXPR: INT_C
ID_LIST: IDEN '=' EXPR
DECLARATION_LIST: TYPE ID_LIST
STATEMENT -> DECLARATION_LIST
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
EXPR: IDEN
EXPR: NULL_T
EXPR: EXPR NEQ EXPR
IDEN: ID
EXPR: IDEN
ARRAY: '['EXPR']'
IDEN: ID
EXPR: IDEN
ARRAY: ARRAY '[' EXPR ']' 
IDEN: ID ARRAY 
ID_LIST: IDEN
PRINT_STMT: PRINT '(' STRING_C ',' ID_LIST ')'
STATEMENT -> PRINT_STMT
STATEMENT_LIST -> STATEMENT
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
IDEN: ID
INC_DEC:    IDEN INC
STATEMENT -> INC_DEC
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
WHILE '(' EXPR ')' SCOPE
STATEMENT -> WHILE_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
PRINT_STMT: PRINT '(' STRING_C ')'
STATEMENT -> PRINT_STMT
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
STATEMENT -> ;
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FOR_BLOCK: FOR '(' DECLARATION_LIST ';' EXPR ';' STATEMENT ')' SCOPE
STATEMENT -> FOR_BLOCK
STATEMENT_LIST -> STATEMENT_LIST STATEMENT 
SCOPE: '{' STATEMENT_LIST '}'
FUNCTION
FUNCTION_LIST -> FUNCTION
PROGRAM -> FUNCTION_LIST
