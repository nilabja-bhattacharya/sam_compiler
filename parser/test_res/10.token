TOKEN: int
TOKEN: arr
TOKEN: [
TOKEN: 1000
TOKEN: ]
TOKEN: ;
TOKEN: int
TOKEN: getMax
TOKEN: (
TOKEN: int
TOKEN: n
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: mx
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: 0
TOKEN: ]
TOKEN: ;
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 1
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: n
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: if
TOKEN: (
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: >
TOKEN: mx
TOKEN: )
TOKEN: {
TOKEN: mx
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: ;
TOKEN: }
TOKEN: }
TOKEN: return
TOKEN: mx
TOKEN: ;
TOKEN: }
TOKEN: void
TOKEN: countSort
TOKEN: (
TOKEN: int
TOKEN: n
TOKEN: ,
TOKEN: int
TOKEN: exp
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: output
TOKEN: [
TOKEN: n
TOKEN: ]
TOKEN: ;
TOKEN: int
TOKEN: count
TOKEN: [
TOKEN: 10
TOKEN: ]
TOKEN: ;
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: n
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: x
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: /
TOKEN: exp
TOKEN: ;
TOKEN: int
TOKEN: y
TOKEN: =
TOKEN: x
TOKEN: %
TOKEN: 10
TOKEN: ;
TOKEN: count
TOKEN: [
TOKEN: y
TOKEN: ]
TOKEN: ++
TOKEN: ;
TOKEN: }
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 1
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: 10
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: j
TOKEN: =
TOKEN: i
TOKEN: -
TOKEN: 1
TOKEN: ;
TOKEN: count
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: +=
TOKEN: count
TOKEN: [
TOKEN: j
TOKEN: ]
TOKEN: ;
TOKEN: }
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: n
TOKEN: -
TOKEN: 1
TOKEN: ;
TOKEN: i
TOKEN: >=
TOKEN: 0
TOKEN: ;
TOKEN: i
TOKEN: --
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: x
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: /
TOKEN: exp
TOKEN: ;
TOKEN: int
TOKEN: y
TOKEN: =
TOKEN: x
TOKEN: %
TOKEN: 10
TOKEN: -
TOKEN: 1
TOKEN: ;
TOKEN: int
TOKEN: z
TOKEN: =
TOKEN: count
TOKEN: [
TOKEN: y
TOKEN: ]
TOKEN: ;
TOKEN: output
TOKEN: [
TOKEN: z
TOKEN: ]
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: ;
TOKEN: x
TOKEN: =
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: /
TOKEN: exp
TOKEN: ;
TOKEN: y
TOKEN: =
TOKEN: x
TOKEN: %
TOKEN: 10
TOKEN: ;
TOKEN: count
TOKEN: [
TOKEN: y
TOKEN: ]
TOKEN: --
TOKEN: ;
TOKEN: }
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: i
TOKEN: =
TOKEN: 0
TOKEN: ;
TOKEN: i
TOKEN: <
TOKEN: n
TOKEN: ;
TOKEN: i
TOKEN: ++
TOKEN: )
TOKEN: {
TOKEN: arr
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: =
TOKEN: output
TOKEN: [
TOKEN: i
TOKEN: ]
TOKEN: ;
TOKEN: }
TOKEN: }
TOKEN: void
TOKEN: radixsort
TOKEN: (
TOKEN: int
TOKEN: n
TOKEN: )
TOKEN: {
TOKEN: int
TOKEN: m
TOKEN: =
TOKEN: getMax
TOKEN: (
TOKEN: n
TOKEN: )
TOKEN: ;
TOKEN: for
TOKEN: (
TOKEN: int
TOKEN: exp
TOKEN: =
TOKEN: 1
TOKEN: ;
TOKEN: m
TOKEN: /
TOKEN: exp
TOKEN: >
TOKEN: 0
TOKEN: ;
TOKEN: exp
TOKEN: *=
TOKEN: 10
TOKEN: )
TOKEN: {
TOKEN: countSort
TOKEN: (
TOKEN: n
TOKEN: ,
TOKEN: exp
TOKEN: )
TOKEN: ;
TOKEN: }
TOKEN: }
